---
- name: Set up OSSM3 Demo Environment
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Display setup message
      debug:
        msg: "This playbook sets up the whole OSSM3 demo."

    ###############################################
    # Install Minio for Tempo
    ###############################################
    - name: Create tracing-system project
      shell:
        cmd: oc new-project tracing-system --skip-config-write=true || true
        
    - name: Install Minio for Tempo
      k8s:
        state: present
        src: ../resources/TempoOtel/minio.yaml
        namespace: tracing-system
        
    - name: Wait for Minio to become available
      k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: minio
        namespace: tracing-system
      register: minio_deployment
      until: minio_deployment.resources[0].status.conditions | selectattr('type', 'equalto', 'Available') | selectattr('status', 'equalto', 'True') | list | length > 0
      retries: 15
      delay: 10
      
    ###############################################
    # Install TempoCR
    ###############################################
    - name: Install TempoCR
      k8s:
        state: present
        src: ../resources/TempoOtel/tempo.yaml
        namespace: tracing-system
        
    - name: Wait for TempoStack to become ready
      shell:
        cmd: oc wait --for condition=Ready TempoStack/sample --timeout 150s -n tracing-system
      register: tempostack_result
      
    - name: Wait for Tempo deployment to become available
      shell:
        cmd: oc wait --for condition=Available deployment/tempo-sample-compactor --timeout 150s -n tracing-system
      register: tempo_deployment_result
      
    - name: Expose Jaeger UI route
      k8s:
        state: present
        api_version: route.openshift.io/v1
        kind: Route
        name: tracing-ui
        namespace: tracing-system
        resource_definition:
          spec:
            port:
              targetPort: jaeger-ui
            to:
              kind: Service
              name: tempo-sample-query-frontend
            
    ###############################################
    # Install OpenTelemetryCollector
    ###############################################
    - name: Create opentelemetrycollector project
      shell:
        cmd: oc new-project opentelemetrycollector --skip-config-write=true || true
        
    - name: Install OpenTelemetryCollector
      k8s:
        state: present
        src: ../resources/TempoOtel/opentelemetrycollector.yaml
        namespace: opentelemetrycollector
        
    - name: Wait for OpenTelemetryCollector deployment to become available
      shell:
        cmd: oc wait --for condition=Available deployment/otel-collector --timeout 60s -n opentelemetrycollector
      register: otel_collector_result
      
    ###############################################
    # Install OSSM3
    ###############################################
    - name: Create istio-system project
      shell:
        cmd: oc new-project istio-system --skip-config-write=true || true
        
    - name: Install IstioCR
      k8s:
        state: present
        src: ../resources/OSSM3/istiocr.yaml
        namespace: istio-system
        
    - name: Wait for istio to become ready
      shell:
        cmd: oc wait --for condition=Ready istio/default --timeout 60s -n istio-system
      register: istio_result
      
    - name: Install Telemetry resource
      k8s:
        state: present
        src: ../resources/TempoOtel/istioTelemetry.yaml
        namespace: istio-system
        
    - name: Add OTEL namespace as part of the mesh
      shell:
        cmd: oc label namespace opentelemetrycollector istio-injection=enabled --overwrite
      register: label_otel_result
      
    ###############################################
    # Install IstioCNI
    ###############################################
    - name: Create istio-cni project
      shell:
        cmd: oc new-project istio-cni --skip-config-write=true || true
        
    - name: Install IstioCNI
      k8s:
        state: present
        src: ../resources/OSSM3/istioCni.yaml
        namespace: istio-cni
        
    - name: Wait for istiocni to become ready
      shell:
        cmd: oc wait --for condition=Ready istiocni/default --timeout 60s -n istio-cni
      register: istiocni_result
      
    ###############################################
    # Create ingress gateway via Gateway API
    ###############################################
    # - name: Create istio-ingress project
    #   shell:
    #     cmd: oc new-project istio-ingress --skip-config-write=true || true
        
    # - name: Add istio-ingress namespace as part of the mesh
    #   shell:
    #     cmd: oc label namespace istio-ingress istio-injection=enabled --overwrite
    #   register: label_ingress_result
      
    # - name: Apply gateway configuration
    #   shell:
    #     cmd: oc apply -k ../resources/gateway
    #   register: gateway_result
      
   
            
    ###############################################
    # Enable monitoring
    ###############################################
    - name: Enable user workload monitoring in OCP
      k8s:
        state: present
        src: ../resources/Monitoring/ocpUserMonitoring.yaml
        
    - name: Enable service monitor in istio-system namespace
      k8s:
        state: present
        src: ../resources/Monitoring/serviceMonitor.yaml
        namespace: istio-system
        
    - name: Enable pod monitor in istio-system namespace
      k8s:
        state: present
        src: ../resources/Monitoring/podMonitor.yaml
        namespace: istio-system
        
    # - name: Enable pod monitor in istio-ingress namespace
    #   k8s:
    #     state: present
    #     src: ../resources/Monitoring/podMonitor.yaml
    #     namespace: istio-ingress
        
    ###############################################
    # Install Kiali
    ###############################################
    - name: Set current project to istio-system
      shell:
        cmd: oc project istio-system
      register: set_project_result
      
    - name: Create cluster role binding for kiali
      k8s:
        state: present
        src: ../resources/Kiali/kialiCrb.yaml
        namespace: istio-system
        
    - name: Get tracing route hostname
      shell:
        cmd: oc get -n tracing-system route tracing-ui -o jsonpath='{.spec.host}'
      register: tracing_route
      
    - name: Set tracing ingress route
      set_fact:
        tracing_ingress_route: "http://{{ tracing_route.stdout }}"
        
    - name: Install KialiCR
      shell:
        cmd: "cat ../resources/Kiali/kialiCr.yaml | JAEGERROUTE='{{ tracing_ingress_route }}' envsubst | oc -n istio-system apply -f -"
      register: kiali_cr_result
      
    - name: Wait for kiali to become ready
      shell:
        cmd: oc wait --for condition=Successful kiali/kiali --timeout 150s -n istio-system
      register: kiali_ready_result
      
    - name: Annotate kiali route
      shell:
        cmd: oc annotate route kiali haproxy.router.openshift.io/timeout=60s -n istio-system --overwrite
      register: annotate_result
      
    - name: Install Kiali OSSM Console plugin
      k8s:
        state: present
        src: ../resources/Kiali/kialiOssmcCr.yaml
        namespace: istio-system
        
    
      
    ###############################################
    # Set display info
    ###############################################

      
    - name: Get Kiali Host
      shell:
        cmd: oc get route kiali -n istio-system -o=jsonpath='{.spec.host}'
      register: kiali_host
      

        
    - name: Display final information
      debug:
        msg:
          - "===================================================================================================="
          - "Kiali route is: https://{{ kiali_host.stdout }}"
          - "===================================================================================================="